[{"/usr/src/app/musico/src/index.js":"1","/usr/src/app/musico/src/App.js":"2","/usr/src/app/musico/src/reportWebVitals.js":"3","/usr/src/app/musico/src/components/playlists.js":"4","/usr/src/app/musico/src/components/header.js":"5","/usr/src/app/musico/src/components/songs.js":"6","/usr/src/app/musico/src/components/playlist.js":"7","/usr/src/app/musico/src/components/login.js":"8","/usr/src/app/musico/src/components/users.js":"9","/usr/src/app/musico/src/components/artistdata.js":"10","/usr/src/app/musico/src/components/playlistForm.js":"11"},{"size":500,"mtime":1611210704473,"results":"12","hashOfConfig":"13"},{"size":1096,"mtime":1615143130277,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1611210704521,"results":"15","hashOfConfig":"13"},{"size":6955,"mtime":1615147844725,"results":"16","hashOfConfig":"13"},{"size":2095,"mtime":1615107864137,"results":"17","hashOfConfig":"13"},{"size":5912,"mtime":1616131275172,"results":"18","hashOfConfig":"13"},{"size":3683,"mtime":1615753752659,"results":"19","hashOfConfig":"13"},{"size":711,"mtime":1611799608126,"results":"20","hashOfConfig":"13"},{"size":568,"mtime":1611266452973,"results":"21","hashOfConfig":"13"},{"size":10925,"mtime":1616131645857,"results":"22","hashOfConfig":"13"},{"size":2631,"mtime":1616048770157,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"3rz5jq",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/usr/src/app/musico/src/index.js",[],["53","54"],"/usr/src/app/musico/src/App.js",["55"],"import { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\nimport Users from './components/users';\nimport Login from './components/login';\nimport Songs from './components/songs';\nimport Playlists from './components/playlists';\nimport Playlist from './components/playlist';\nimport Header from './components/header';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: \"#fafafa\"\n  }\n}))\n\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <BrowserRouter>\n        <Grid container className={classes.root}>\n            <Header />\n          <Switch>\n            <Route exact path=\"/users\" component={Users} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/songs\" component={Songs} />\n            <Route exact path=\"/playlists\" component={Playlists} />\n            <Route ezact path=\"/playlist/:name\" component={Playlist} />\n          </Switch>\n        </Grid>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/usr/src/app/musico/src/reportWebVitals.js",[],"/usr/src/app/musico/src/components/playlists.js",["56","57","58","59"],"import React, {useState, useEffect, useRef} from 'react';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport SettingsApplicationsIcon from '@material-ui/icons/SettingsApplications';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport '../styles/playlists.css';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles((theme) => ({\n    grid: {\n        margin: theme.spacing(2),\n        marginRight: theme.spacing(4)\n        \n    },\n    table: {\n        backgroundColor: \"#FFFFFF\"\n    },\n    linkBorder: {\n        textDecoration: \"none\",\n        color: \"rgba(0, 0, 0, 0.87)\"\n    },\n    playlistsNav: {\n        backgroundColor: \"#f5f5f5\"\n    },\n    playlistNameTable: {\n        '&:hover': {\n            backgroundColor: \"#e8eaf6\"\n        },\n        transition: \"all 0.5s\"\n    },\n    playlistCenterCell: {\n        textAlign: \"center\"\n    },\n    \n\n\n}))\n\n\nconst Playlists = () => {\n    const [playlists, setPlaylists] = useState([]);\n    const [playlist, setPlaylist] = useState(null);\n    const [open, setOpen] = useState(false);\n    const inputIsPublic = useRef(null);\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        axios.get('/api/v1/playlist', {\n            params: {\n                id: 2\n            }\n        })\n        .then(response => {\n            console.log(response.data.Playlists);\n            setPlaylists(response.data.Playlists);\n            \n        })\n    },[]);\n\n    const handleOpen = () => setOpen(!open);\n    const handleClose = () => setOpen(false);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const is_public = event.target.isPublic.value;\n        const playlist = event.target.playlist.value;\n        const customer_id = event.target.customer_id.value;\n        axios.patch('/api/v1/playlist/', {\n            id: playlist,\n            isPublic: is_public,\n            customer_id: customer_id\n        })\n        .then(response => {\n            console.log(response.data);\n            setPlaylists(response.data[0].Playlists);\n            handleClose();\n        })\n    }\n\n    \n    \n    return(\n        <Grid container className={classes.grid}>\n            <Grid item md={2} item className={classes.grid}>\n                <List component=\"nav\" className={classes.playlistNav}>\n                    \n                    {playlists.map(playlist => (\n                            <Link to={\"/playlist/\" + playlist.name } className={classes.linkBorder} >\n                                <ListItem button><ListItemText primary={playlist.name} /></ListItem>\n                            </Link>\n                            \n                        ))}\n                    <Divider />\n                    \n                </List>\n                \n            </Grid>\n            <Grid item md={7} >\n                <TableContainer component={Paper} className={classes.table}>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <th>プレイリスト名</th>\n                                <th>公開設定</th>\n                                <th><SettingsIcon \n                                        color=\"disabled\"\n                                        fontSize=\"large\"\n                                    />\n                                </th>\n                                <th></th>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {playlists.map(playlist => (\n                                <TableRow key={playlist.id.toString()}>\n                                    <TableCell component={Link} to={\"/playlist/\" + playlist.name } className={classes.linkBorder + \" \" + classes.playlistNameTable} button>\n                                        <Typography variant=\"body1\">{playlist.name}</Typography>\n                                    </TableCell>\n                                    {playlist.isPublic ? <TableCell className={classes.playlistCenterCell}>公開</TableCell> : <TableCell className={classes.playlistCenterCell}>非公開</TableCell> }\n                                    <TableCell className={classes.playlistCenterCell}><button  onClick={handleOpen}>\n                                            <SettingsApplicationsIcon \n                                            color=\"disabled\"\n                                            fontSize=\"large\"\n                                            />\n                                        </button>\n                                    </TableCell>\n                                    \n                                    <td className={open? \"showform\" : \"hiddenform\"}>\n                                        <form onSubmit={handleSubmit}>\n                                            <label htmlFor=\"isPublic\">\n                                                <input type=\"hidden\" name=\"playlist\" value={playlist.id} />\n                                                <input type=\"hidden\" name=\"customer_id\" value={playlist.customerId} />\n                                                <input type=\"radio\" name=\"isPublic\" value=\"true\" defaultChecked={playlist.isPublic? \"checked\": null}/>公開\n                                                <input type=\"radio\" name=\"isPublic\" value=\"false\" defaultChecked={playlist.isPublic? null: \"checked\"}/>非公開\n                                            </label>\n                                            <Button type=\"submit\" variant=\"contained\" color=\"primary\" >\n                                                更新\n                                            </Button>\n                                        </form>\n                                    </td>\n                                    \n                                    \n                                    \n                                </TableRow>\n                            ))}\n                            <tr>\n\n                            </tr>\n                        </TableBody>\n                    </Table>\n                    \n                </TableContainer>\n            </Grid>\n            \n        </Grid>\n    )\n}\n\nexport default Playlists","/usr/src/app/musico/src/components/header.js",["60"],"import React from 'react';\nimport {Link } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport FeaturedPlayListIcon from '@material-ui/icons/FeaturedPlayList';\nimport PageviewIcon from '@material-ui/icons/Pageview';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { NoEncryption } from '@material-ui/icons';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      \n    },\n    title: {\n        flexGrow: 1,\n    },\n    rootLink: {\n        flexGrow: 2\n    },\n    linkBorder: {\n        textDecoration: \"none\"\n        \n    },\n    button: {\n        margin: theme.spacing(1),\n        color: \"#c5cae9\",\n        \"&:hover\": {\n            color: \"#9fa8da\"\n        }\n    },\n    iconSize: {\n        fontSize: 30\n    },\n}));\n\n\nconst Header = () => {\n    const classes = useStyles();\nreturn(\n    <Grid item md={12}>\n        <AppBar position=\"static\" className={classes.root}>\n            <Toolbar className={classes.rootLink}> \n                <Typography variant=\"h4\" className={classes.title}>\n                    Musico\n                </Typography>\n                <Link to=\"/playlists\" className={classes.linkBorder}>\n                    <Button className={classes.button} startIcon={<FeaturedPlayListIcon className={classes.iconSize} />}>\n                        <Typography variant=\"h6\" className={classes.title}>MyPlaylists</Typography>\n                    </Button>\n                </Link>\n                <Link to=\"/songs\" className={classes.linkBorder} >\n                <Button className={classes.button} startIcon={<PageviewIcon className={classes.iconSize}/>}>\n                    <Typography variant=\"h6\" className={classes.title}>SearchMusic</Typography>\n                </Button> \n                </Link>\n            </Toolbar>\n               \n            \n            \n        </AppBar>\n    </Grid>\n    \n)\n}\n\n\n\n\nexport default Header;","/usr/src/app/musico/src/components/songs.js",[],"/usr/src/app/musico/src/components/playlist.js",["61","62"],"import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Link, useParams } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\n\n\n\nconst Playlist = () => {\n    const { name } = useParams();\n    const [playlistSongs, setPlaylistSongs] = useState([]);\n    useEffect(() => {\n        axios.get('/api/v1/playlist/' + name, {\n            params: {\n                id: 2\n            }\n        })\n        .then(response => {\n            console.log(response.data.Songs);\n            setPlaylistSongs(response.data.Songs);\n        })\n    },[]);\n\n    const handleSongClick = (song_id, playlist_id) => {\n        axios.delete(`/api/v1/playlist/relation/${song_id}/${playlist_id} `)\n        .then(response => {\n            \n            setPlaylistSongs(response.data[0].Songs)\n        });\n    }\n\n\n    return(\n        <Grid container>\n            \n            {/* <ul>\n                {playlistSongs.map(playlist => (\n                    <li><button key={playlist.id}><Link to={\"/playlist/\" + playlist.name}>{playlist.name}</Link></button></li>\n                ))}\n                \n            </ul> */}\n            <Grid item md={12}>\n                <h2>{name}</h2>\n            </Grid>\n            <Grid item md={2}></Grid>\n            <Grid item md={7} spacing={8}>\n                <TableContainer component={Paper}>\n                    <Table aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <th>ジャケ写</th>\n                                <th>曲名</th>\n                                <th>アーティスト名</th>\n                                <th>アルバム名</th>\n                                <th>ジャンル</th>\n                                <th>リリース日</th>\n                                <th></th>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {playlistSongs.map(song => (\n                                <TableRow key={song.id}>\n                                    <TableCell><img src={song.albumUrl} alt={song.albumName} /></TableCell>\n                                    <TableCell>{song.name}</TableCell>\n                                    <TableCell>{song.artistName}</TableCell>\n                                    <TableCell>{song.albumName}</TableCell>\n                                    <TableCell>{song.genre}</TableCell>\n                                    <TableCell>{song.releaseAt}</TableCell>\n                                    <TableCell>\n                                        <IconButton aria-label=\"delete\"  onClick={() => {handleSongClick(song.Relation.songId, song.Relation.playlistId)}}>\n                                        <DeleteIcon fontSize=\"large\" color=\"secondary\"/>\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Grid>\n       \n        </Grid>\n    )\n}\n\n\n\nexport default Playlist;\n","/usr/src/app/musico/src/components/login.js",["63","64"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport GoogleButton from 'react-google-button';\nimport axios from 'axios';\nconst Login = () => {\n\n    const history = useHistory();\n\n\n    const signIn = async() => {\n        fetch('/api/auth/google')\n        .then(res => {\n            const currentCustomer = res.data;\n            console.log(currentCustomer);\n            history.push('/users');\n        })\n        const currentCustomer = await history.push('/api/auth/google');\n        console.log(currentCustomer);\n        history.push('/users');\n        \n    }\n\n\n\n    return (\n        <GoogleButton\n            onClick={signIn}\n        />\n    )\n}\n\nexport default Login;","/usr/src/app/musico/src/components/users.js",[],"/usr/src/app/musico/src/components/artistdata.js",["65","66","67","68","69","70","71"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport axios from 'axios'\n\n\nconst useStyles = makeStyles((theme) => ({\n    media: {\n        height: 100,\n        width: 100,\n    },\n    content: {\n        paddingBottom: theme.spacing(1)\n    },\n    topInfo: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    actions: {\n        justifyContent: 'space-between',\n    },\n    drawer: {\n        padding: theme.spacing(1)\n    },\n    playlistForm: {\n        padding: theme.spacing(2),\n    },\n    playlistButton: {\n        marginTop: theme.spacing(2)\n    },\n    noalbum: {\n        display: 'none',\n    },\n    card: {\n        width: 345,\n        marginTop: theme.spacing(2)\n    }\n}))\nconst ArtistData = (props) => {\n    const classes = useStyles();\n    const history = useHistory();\n    const [openDrawer, setOpenDrawer] = useState(false)\n    useEffect(() => {\n        \n            axios.get('/api/v1/playlist', {\n                params: {\n                    id: 2\n                }\n            })\n            .then(response => {\n                \n                setPlaylists(response.data.Playlists)\n                setPlaylistValue(response.data.Playlists[0].name)\n            }).catch(err => console.log(err));\n        \n        \n    },[])\n    \n    \n    const [playlists, setPlaylists] = useState([]);\n    const [playlistValue, setPlaylistValue] = useState('');\n\n    const handlePlaylistChange = e => {\n        console.log(e.target)\n        setPlaylistValue(e.target.value)\n       \n    }\n\n\n    const handlePlaylistSubmit = event => {\n        event.preventDefault();\n        const playlist_id = event.target.playlist.value;\n        const customer_id = event.target.customer_id.value;\n        const track_id = event.target.track_id.value;\n        const name = event.target.name.value;\n        const artist_name = event.target.artist_name.value;\n        const album_name = event.target.album_name.value;\n        const album_url = event.target.album_url.value;\n        const genre = event.target.genre.value;\n        const release_at = event.target.release_at.value;\n        axios.post('/api/v1/playlist/relation', {\n            customer_id: 2,\n            song: {\n                trackId: track_id,\n                name: name,\n                artistName: artist_name,\n                albumName: album_name,\n                albumUrl: album_url,\n                genre: genre,\n                releaseAt: release_at\n            },\n            playlistId: playlist_id\n            \n        })\n        .then(response => {\n            console.log(response.data.msg);\n            toggleDrawer(false)\n        })\n    }\n    const favoriteSubmit = (event) => {\n        event.preventDefault();\n        // console.log(event.target.elements);\n        // console.log(event.target.customer_id.value);\n        const customer_id = event.target.customer_id.value;\n        const track_id = event.target.track_id.value;\n        const name = event.target.name.value;\n        const artist_name = event.target.artist_name.value;\n        const album_name = event.target.album_name.value;\n        const album_url = event.target.album_url.value;\n        const genre = event.target.genre.value;\n        const release_at = event.target.release_at.value;\n        axios.post('/api/v1/favorite', {\n            customer_id: 2,\n            song: {\n                trackId: track_id,\n                name: name,\n                artistName: artist_name,\n                albumName: album_name,\n                albumUrl: album_url,\n                genre: genre,\n                releaseAt: release_at\n            }\n            \n        })\n        .then(response => {\n            console.log(response.data.msg);\n        })\n    }\n\n    const toggleDrawer = (open) => {\n        setOpenDrawer(open);\n    };\n    return(\n        \n        <Box className={props.id ? null: classes.noalbum}>\n            <Card className={props.id ? classes.card: classes.noalbum}>\n                <Grid container className={classes.topInfo}>\n                    <Grid item md={5}>\n                        <CardMedia \n                        className={classes.media}\n                        image={props.albumUrl}\n                        title={props.album}\n                        />\n                    </Grid>\n                    <Grid item md={7} >\n                    <Typography variant=\"body1\" component=\"p\" className={classes.content}>\n                        ジャンル: <b>{props.genre}</b>\n                    </Typography>\n                    <Typography variant=\"body1\" component=\"p\" className={classes.content}>\n                        アーティスト: <b>{props.name}</b>\n                    </Typography>\n                    </Grid> \n                </Grid>\n                \n                <CardContent>\n                    <Typography variant=\"h5\" component=\"h2\"　className={classes.content}>\n                        {props.trackName}\n                    </Typography>\n                \n                    <Typography variant=\"body1\" component=\"p\" className={classes.content}>\n                        アルバム名: <b>{props.album}</b>\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\">\n                        リリース日: <b>{props.release}</b>\n                    </Typography>\n                </CardContent>\n                <CardActions className={classes.actions}>\n                    \n                    <form onSubmit={event => favoriteSubmit(event)}>\n                            \n                        <input type=\"hidden\" name=\"customer_id\" value=\"2\" />\n                        <input type=\"hidden\" name=\"track_id\" value={props.id} />\n                        <input type=\"hidden\" name=\"name\" value={props.trackName} />\n                        <input type=\"hidden\" name=\"artist_name\" value={props.name} />\n                        <input type=\"hidden\" name=\"album_name\" value={props.album} />\n                        <input type=\"hidden\" name=\"album_url\" value={props.AlbumUrl60} />\n                        <input type=\"hidden\" name=\"genre\" value={props.genre} />\n                        <input type=\"hidden\" name=\"release_at\" value={props.release} />\n                        <Fab color=\"secondary\" aria-label=\"add to favorites\" type=\"submit\">\n                            <FavoriteIcon />\n                        </Fab>\n                    </form>\n                    <Fab color=\"primary\" aria-label=\"add\" onClick={() => toggleDrawer(true)}>\n                        <AddIcon />\n                    </Fab>\n                    <Drawer anchor='bottom' open={openDrawer} onClose={() => toggleDrawer(false)}>\n                        <Grid container className={classes.drawer}>\n                            <Grid item md={5} className={classes.topInfo}>\n                                <CardMedia \n                                    className={classes.media}\n                                    image={props.albumUrl}\n                                    title={props.album}\n                                />\n                                <Box p={1}>\n                                    <Typography variant=\"h5\" component=\"h2\"　className={classes.content}>\n                                        {props.trackName}\n                                    </Typography>\n                                    <Typography variant=\"body1\" component=\"p\" className={classes.content}>\n                                        アーティスト: <b>{props.name}</b>\n                                    </Typography>\n                                </Box>\n                                \n                            </Grid>\n                            <Grid item md={7} className={classes.playlistForm}>\n                                <form onSubmit={handlePlaylistSubmit}>\n                                        \n                                        <input type=\"hidden\" name=\"customer_id\" value=\"2\" />\n                                        <input type=\"hidden\" name=\"track_id\" value={props.id} />\n                                        <input type=\"hidden\" name=\"name\" value={props.trackName} />\n                                        <input type=\"hidden\" name=\"artist_name\" value={props.name} />\n                                        <input type=\"hidden\" name=\"album_name\" value={props.album} />\n                                        <input type=\"hidden\" name=\"album_url\" value={props.AlbumUrl60} />\n                                        <input type=\"hidden\" name=\"genre\" value={props.genre} />\n                                        <input type=\"hidden\" name=\"release_at\" value={props.release} />\n                                    \n                                    \n                                        <InputLabel id=\"playlist\">Playlist</InputLabel>\n                                        <Select labelId=\"playlist\" inputProps={{'name': 'playlist'}} onChange={handlePlaylistChange} >\n                                            {\n                                            playlists.map(playlist => (\n                                                <MenuItem value={playlist.id} key={playlist.id}>{playlist.name}</MenuItem>\n                                                \n                                            ))\n                                            }\n                                            \n                                        </Select>\n                                    \n                                    <Button type=\"submit\" size=\"small\" variant=\"contained\" color=\"primary\" className={classes.playlistButton}>追加</Button>\n                                </form>\n                            </Grid>\n                            \n                        </Grid>\n                    </Drawer>\n                </CardActions>\n\n\n            </Card>\n            \n        </Box>\n    );\n}\n\nexport default ArtistData\n","/usr/src/app/musico/src/components/playlistForm.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":1,"column":40,"nodeType":"78","messageId":"79","endLine":1,"endColumn":44},{"ruleId":"76","severity":1,"message":"80","line":55,"column":12,"nodeType":"78","messageId":"79","endLine":55,"endColumn":20},{"ruleId":"76","severity":1,"message":"81","line":55,"column":22,"nodeType":"78","messageId":"79","endLine":55,"endColumn":33},{"ruleId":"76","severity":1,"message":"82","line":57,"column":11,"nodeType":"78","messageId":"79","endLine":57,"endColumn":24},{"ruleId":"83","severity":1,"message":"84","line":98,"column":31,"nodeType":"85","endLine":98,"endColumn":35},{"ruleId":"76","severity":1,"message":"86","line":11,"column":10,"nodeType":"78","messageId":"79","endLine":11,"endColumn":22},{"ruleId":"76","severity":1,"message":"77","line":4,"column":10,"nodeType":"78","messageId":"79","endLine":4,"endColumn":14},{"ruleId":"87","severity":1,"message":"88","line":30,"column":7,"nodeType":"89","endLine":30,"endColumn":9,"suggestions":"90"},{"ruleId":"76","severity":1,"message":"91","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":25},{"ruleId":"76","severity":1,"message":"92","line":4,"column":8,"nodeType":"78","messageId":"79","endLine":4,"endColumn":13},{"ruleId":"76","severity":1,"message":"93","line":5,"column":8,"nodeType":"78","messageId":"79","endLine":5,"endColumn":26},{"ruleId":"76","severity":1,"message":"94","line":13,"column":8,"nodeType":"78","messageId":"79","endLine":13,"endColumn":18},{"ruleId":"76","severity":1,"message":"95","line":19,"column":8,"nodeType":"78","messageId":"79","endLine":19,"endColumn":19},{"ruleId":"76","severity":1,"message":"96","line":59,"column":11,"nodeType":"78","messageId":"79","endLine":59,"endColumn":18},{"ruleId":"76","severity":1,"message":"97","line":79,"column":12,"nodeType":"78","messageId":"79","endLine":79,"endColumn":25},{"ruleId":"76","severity":1,"message":"98","line":91,"column":15,"nodeType":"78","messageId":"79","endLine":91,"endColumn":26},{"ruleId":"76","severity":1,"message":"98","line":122,"column":15,"nodeType":"78","messageId":"79","endLine":122,"endColumn":26},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'playlist' is assigned a value but never used.","'setPlaylist' is assigned a value but never used.","'inputIsPublic' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'NoEncryption' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.","ArrayExpression",["101"],"'useState' is defined but never used.","'axios' is defined but never used.","'FavoriteBorderIcon' is defined but never used.","'IconButton' is defined but never used.","'FormControl' is defined but never used.","'history' is assigned a value but never used.","'playlistValue' is assigned a value but never used.","'customer_id' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},"Update the dependencies array to be: [name]",{"range":"104","text":"105"},[1045,1047],"[name]"]