[{"/usr/src/app/musico/src/index.js":"1","/usr/src/app/musico/src/App.js":"2","/usr/src/app/musico/src/reportWebVitals.js":"3","/usr/src/app/musico/src/components/users.js":"4","/usr/src/app/musico/src/components/login.js":"5","/usr/src/app/musico/src/components/songs.js":"6","/usr/src/app/musico/src/components/artistdata.js":"7","/usr/src/app/musico/src/components/playlistForm.js":"8","/usr/src/app/musico/src/components/playlists.js":"9","/usr/src/app/musico/src/components/playlist.js":"10","/usr/src/app/musico/src/components/playlistSettingForm.js":"11","/usr/src/app/musico/src/components/header.js":"12"},{"size":500,"mtime":1611210704473,"results":"13","hashOfConfig":"14"},{"size":882,"mtime":1612633093558,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1611210704521,"results":"16","hashOfConfig":"14"},{"size":568,"mtime":1611266452973,"results":"17","hashOfConfig":"14"},{"size":711,"mtime":1611799608126,"results":"18","hashOfConfig":"14"},{"size":4120,"mtime":1612629540719,"results":"19","hashOfConfig":"14"},{"size":6879,"mtime":1612633009568,"results":"20","hashOfConfig":"14"},{"size":2780,"mtime":1612630918541,"results":"21","hashOfConfig":"14"},{"size":5777,"mtime":1612633495071,"results":"22","hashOfConfig":"14"},{"size":3781,"mtime":1612634591441,"results":"23","hashOfConfig":"14"},{"size":2332,"mtime":1612435805139,"results":"24","hashOfConfig":"14"},{"size":1043,"mtime":1612613350936,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"3rz5jq",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/usr/src/app/musico/src/index.js",[],["57","58"],"/usr/src/app/musico/src/App.js",["59"],"import { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\nimport Users from './components/users';\nimport Login from './components/login';\nimport Songs from './components/songs';\nimport Playlists from './components/playlists';\nimport Playlist from './components/playlist';\nimport Header from './components/header';\nimport Grid from '@material-ui/core/Grid';\n\n\n\n\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n        <Grid container>\n            <Header />\n        </Grid>\n        <Switch>\n          <Route exact path=\"/users\" component={Users} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/songs\" component={Songs} />\n          <Route exact path=\"/playlists\" component={Playlists} />\n          <Route ezact path=\"/playlist/:name\" component={Playlist} />\n        </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/usr/src/app/musico/src/reportWebVitals.js",[],"/usr/src/app/musico/src/components/users.js",[],"/usr/src/app/musico/src/components/login.js",["60","61"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport GoogleButton from 'react-google-button';\nimport axios from 'axios';\nconst Login = () => {\n\n    const history = useHistory();\n\n\n    const signIn = async() => {\n        fetch('/api/auth/google')\n        .then(res => {\n            const currentCustomer = res.data;\n            console.log(currentCustomer);\n            history.push('/users');\n        })\n        const currentCustomer = await history.push('/api/auth/google');\n        console.log(currentCustomer);\n        history.push('/users');\n        \n    }\n\n\n\n    return (\n        <GoogleButton\n            onClick={signIn}\n        />\n    )\n}\n\nexport default Login;","/usr/src/app/musico/src/components/songs.js",[],"/usr/src/app/musico/src/components/artistdata.js",["62","63","64","65"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios'\nconst ArtistData = (props) => {\n\n    const history = useHistory();\n    \n    useEffect(() => {\n        \n            axios.get('/api/v1/playlist', {\n                params: {\n                    id: 2\n                }\n            })\n            .then(response => {\n                \n                setPlaylists(response.data.Playlists)\n                setPlaylistValue(response.data.Playlists[0].name)\n            }).catch(err => console.log(err));\n        \n        \n    },[])\n    \n    \n    const [playlists, setPlaylists] = useState([]);\n    const [playlistValue, setPlaylistValue] = useState(null);\n\n    const handlePlaylistChange = e => {\n        setPlaylistValue(e.target.selectedOptions[0].text);\n       \n    }\n\n\n    const handlePlaylistSubmit = event => {\n        event.preventDefault();\n        const playlist_id = event.target.playlist.value;\n        const customer_id = event.target.customer_id.value;\n        const track_id = event.target.track_id.value;\n        const name = event.target.name.value;\n        const artist_name = event.target.artist_name.value;\n        const album_name = event.target.album_name.value;\n        const album_url = event.target.album_url.value;\n        const genre = event.target.genre.value;\n        const release_at = event.target.release_at.value;\n        axios.post('/api/v1/playlist/relation', {\n            customer_id: 2,\n            song: {\n                trackId: track_id,\n                name: name,\n                artistName: artist_name,\n                albumName: album_name,\n                albumUrl: album_url,\n                genre: genre,\n                releaseAt: release_at\n            },\n            playlistId: playlist_id\n            \n        })\n        .then(response => {\n            console.log(response.data.msg);\n        })\n    }\n    const favoriteSubmit = (event) => {\n        event.preventDefault();\n        // console.log(event.target.elements);\n        // console.log(event.target.customer_id.value);\n        const customer_id = event.target.customer_id.value;\n        const track_id = event.target.track_id.value;\n        const name = event.target.name.value;\n        const artist_name = event.target.artist_name.value;\n        const album_name = event.target.album_name.value;\n        const album_url = event.target.album_url.value;\n        const genre = event.target.genre.value;\n        const release_at = event.target.release_at.value;\n        axios.post('/api/v1/favorite', {\n            customer_id: 2,\n            song: {\n                trackId: track_id,\n                name: name,\n                artistName: artist_name,\n                albumName: album_name,\n                albumUrl: album_url,\n                genre: genre,\n                releaseAt: release_at\n            }\n            \n        })\n        .then(response => {\n            console.log(response.data.msg);\n        })\n    }\n\n    return(\n        \n        <div className={props.id ? 'album': 'noalbum'}>\n            <div className=\"flex\">\n                <img src={props.albumUrl} alt={props.album} className=\"albumImage\"/>\n                <div>\n                    <p>ジャンル: <b>{props.genre}</b></p>\n                </div>\n                \n            </div>\n            <div className=\"mask\">\n                <div className=\"caption\">\n                    <p>{props.album}</p>\n                    <div className=\"favorite\">\n                        <form onSubmit={event => favoriteSubmit(event)}>\n                            \n                                <input type=\"hidden\" name=\"customer_id\" value=\"2\" />\n                                <input type=\"hidden\" name=\"track_id\" value={props.id} />\n                                <input type=\"hidden\" name=\"name\" value={props.trackName} />\n                                <input type=\"hidden\" name=\"artist_name\" value={props.name} />\n                                <input type=\"hidden\" name=\"album_name\" value={props.album} />\n                                <input type=\"hidden\" name=\"album_url\" value={props.AlbumUrl60} />\n                                <input type=\"hidden\" name=\"genre\" value={props.genre} />\n                                <input type=\"hidden\" name=\"release_at\" value={props.release} />\n                        \n                            <button type=\"submit\"><FavoriteBorderIcon /></button>\n                        </form>\n                    </div>\n                    <div className=\"playlist\">\n                        <form onSubmit={handlePlaylistSubmit}>\n                            \n                                <input type=\"hidden\" name=\"customer_id\" value=\"2\" />\n                                <input type=\"hidden\" name=\"track_id\" value={props.id} />\n                                <input type=\"hidden\" name=\"name\" value={props.trackName} />\n                                <input type=\"hidden\" name=\"artist_name\" value={props.name} />\n                                <input type=\"hidden\" name=\"album_name\" value={props.album} />\n                                <input type=\"hidden\" name=\"album_url\" value={props.AlbumUrl60} />\n                                <input type=\"hidden\" name=\"genre\" value={props.genre} />\n                                <input type=\"hidden\" name=\"release_at\" value={props.release} />\n                            \n                            <div>\n                                <label htmlFor=\"playlist\">Playlist</label>\n                                <select name=\"playlist\" onChange={handlePlaylistChange}>\n                                    {\n                                     playlists.map(playlist => (\n                                        <option value={playlist.id} key={playlist.id}>{playlist.name}</option>\n                                         \n                                     ))\n                                    }\n                                    \n                                    \n                                    \n                                </select>\n                            </div>\n                            <Button type=\"submit\" size=\"small\" variant=\"contained\" color=\"primary\">{playlistValue + 'に'}追加</Button>\n                        </form>\n                    </div>\n                    \n                </div>\n            </div>\n            <div>\n                <p>アーティスト: <b>{props.name}</b></p>\n                <p>曲名: <b>{props.trackName}</b></p>\n                <p>リリース日: <b>{props.release}</b></p>\n            </div>\n            \n            \n            \n        </div>\n    );\n}\n\nexport default ArtistData\n","/usr/src/app/musico/src/components/playlistForm.js",["66"],"import React, { useState } from 'react';\nimport '../styles/popupform.css';\nimport axios from 'axios';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport { FormControlLabel } from '@material-ui/core';\n\nconst PlaylistForm = (props) => {\n    const [value, setValue] = useState(\"false\");\n\n    const handleChange = (e) => {\n        setValue(e.target.value);\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const nameElement = event.target.elements[\"name\"];\n        const isPublicElement = event.target.elements[\"isPublic\"];\n        axios.post('/api/v1/playlist/', {\n            name: nameElement.value,\n            isPublic: isPublicElement.value\n        })\n        .then(response => {\n            if(response.data.isCreate){\n                nameElement.value = \"\";\n                isPublicElement.value = \"\";\n                console.log(response);\n                props.closePopup(!props.isPopup);\n            }else{\n                console.log(response.msg);\n            }\n            \n        })\n\n    }\n\n\n\n    return(\n        <div className=\"playlistform\">\n            <div className=\"popup\">\n                <div className=\"popup_inner\" container>\n                    <div >\n                        <h2>Create Playlist</h2>\n                        <Button variant=\"outlined\" color=\"secondary\" onClick={() => props.closePopup(!props.isPopup)}>Close Popup</Button>\n                    </div>\n                    <div >\n                        <form onSubmit={event => handleSubmit(event)}>\n                            <div>\n                                <TextField  name=\"name\" id=\"name\" label=\"Playlist Name\" />\n                            </div>\n                            <div>\n                                <FormLabel component=\"legend\">みんなに公開しますか？</FormLabel>\n                                    <RadioGroup aria-label=\"isPublic\" name=\"isPublic\" value={value} onChange={handleChange}>\n                                        <FormControlLabel value=\"true\" control={<Radio />} label=\"Yes(Public)\" />\n                                        <FormControlLabel value=\"false\" control={<Radio />} label=\"No(Private)\" />\n                                    </RadioGroup>\n                            </div>\n                            <Button type=\"submit\" variant=\"contained\" color=\"primary\">Playlist Create</Button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PlaylistForm","/usr/src/app/musico/src/components/playlists.js",["67","68","69"],"import React, {useState, useEffect, useRef} from 'react';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport SettingsApplicationsIcon from '@material-ui/icons/SettingsApplications';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport '../styles/playlists.css';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\n\n\n\nconst Playlists = () => {\n    const [playlists, setPlaylists] = useState([]);\n    const [playlist, setPlaylist] = useState(null);\n    const [open, setOpen] = useState(false);\n    const inputIsPublic = useRef(null);\n    useEffect(() => {\n        axios.get('/api/v1/playlist', {\n            params: {\n                id: 2\n            }\n        })\n        .then(response => {\n            console.log(response.data.Playlists);\n            setPlaylists(response.data.Playlists);\n            \n        })\n    },[]);\n\n    const handleOpen = () => setOpen(!open);\n    const handleClose = () => setOpen(false);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const is_public = event.target.isPublic.value;\n        const playlist = event.target.playlist.value;\n        const customer_id = event.target.customer_id.value;\n        axios.patch('/api/v1/playlist/', {\n            id: playlist,\n            isPublic: is_public,\n            customer_id: customer_id\n        })\n        .then(response => {\n            console.log(response.data);\n            setPlaylists(response.data[0].Playlists);\n            handleClose();\n        })\n    }\n\n    return(\n        <Grid container spacing={8}>\n            <Grid item md={3}>\n                <List component=\"nav\" aria-label=\"mailbox folders\">\n                    \n                    {playlists.map(playlist => (\n                            <Link to={\"/playlist/\" + playlist.name }>\n                                <ListItem button><ListItemText primary={playlist.name} /></ListItem>\n                            </Link>\n                            \n                        ))}\n                    <Divider />\n                    \n                </List>\n                \n            </Grid>\n            <Grid item md={7} >\n                <TableContainer component={Paper}>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <th>プレイリスト名</th>\n                                <th>公開設定</th>\n                                <th><SettingsIcon \n                                        color=\"disabled\"\n                                        fontSize=\"large\"\n                                    />\n                                </th>\n                                <th></th>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {playlists.map(playlist => (\n                                <TableRow key={playlist.id.toString()}>\n                                    <TableCell>{playlist.name}</TableCell>\n                                    {playlist.isPublic ? <TableCell>公開</TableCell> : <TableCell>非公開</TableCell> }\n                                    <TableCell><button  onClick={handleOpen}>\n                                            <SettingsApplicationsIcon \n                                            color=\"disabled\"\n                                            fontSize=\"large\"\n                                            />\n                                        </button>\n                                    </TableCell>\n                                    \n                                    <td className={open? \"showform\" : \"hiddenform\"}>\n                                        <form onSubmit={handleSubmit}>\n                                            <label htmlFor=\"isPublic\">\n                                                <input type=\"hidden\" name=\"playlist\" value={playlist.id} />\n                                                <input type=\"hidden\" name=\"customer_id\" value={playlist.customerId} />\n                                                <input type=\"radio\" name=\"isPublic\" value=\"true\" defaultChecked={playlist.isPublic? \"checked\": null}/>公開\n                                                <input type=\"radio\" name=\"isPublic\" value=\"false\" defaultChecked={playlist.isPublic? null: \"checked\"}/>非公開\n                                            </label>\n                                            <Button type=\"submit\" variant=\"contained\" color=\"primary\" >\n                                                更新\n                                            </Button>\n                                        </form>\n                                    </td>\n                                    \n                                    \n                                    \n                                </TableRow>\n                            ))}\n                            <tr>\n\n                            </tr>\n                        </TableBody>\n                    </Table>\n                    \n                </TableContainer>\n            </Grid>\n            \n        </Grid>\n    )\n}\n\nexport default Playlists","/usr/src/app/musico/src/components/playlist.js",["70","71"],"import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Link, useParams } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\n\n\n\nconst Playlist = () => {\n    const { name } = useParams();\n    const [playlistSongs, setPlaylistSongs] = useState([]);\n    useEffect(() => {\n        axios.get('/api/v1/playlist/' + name, {\n            params: {\n                id: 2\n            }\n        })\n        .then(response => {\n            console.log(response.data.Songs);\n            setPlaylistSongs(response.data.Songs);\n        })\n    },[]);\n\n    const handleSongClick = (song_id, playlist_id) => {\n        axios.delete(`/api/v1/playlist/relation/${song_id}/${playlist_id} `)\n        .then(response => {\n            \n            setPlaylistSongs(response.data[0].Songs)\n        });\n    }\n\n\n    return(\n        <Grid container>\n            \n            {/* <ul>\n                {playlistSongs.map(playlist => (\n                    <li><button key={playlist.id}><Link to={\"/playlist/\" + playlist.name}>{playlist.name}</Link></button></li>\n                ))}\n                \n            </ul> */}\n            <Grid item md={12}>\n                <h2>{name}</h2>\n            </Grid>\n            <Grid item md={3}></Grid>\n            <Grid item md={6} spacing={8}>\n                <TableContainer component={Paper}>\n                    <Table aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>ジャケ写</TableCell>\n                                <TableCell>曲名</TableCell>\n                                <TableCell>アーティスト名</TableCell>\n                                <TableCell>アルバム名</TableCell>\n                                <TableCell>ジャンル</TableCell>\n                                <TableCell>リリース日</TableCell>\n                                <TableCell></TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {playlistSongs.map(song => (\n                                <TableRow key={song.id}>\n                                    <TableCell><img src={song.albumUrl} alt={song.albumName} /></TableCell>\n                                    <TableCell>{song.name}</TableCell>\n                                    <TableCell>{song.artistName}</TableCell>\n                                    <TableCell>{song.albumName}</TableCell>\n                                    <TableCell>{song.genre}</TableCell>\n                                    <TableCell>{song.releaseAt}</TableCell>\n                                    <TableCell>\n                                        <IconButton aria-label=\"delete\"  onClick={() => {handleSongClick(song.Relation.songId, song.Relation.playlistId)}}>\n                                        <DeleteIcon fontSize=\"large\" color=\"secondary\"/>\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Grid>\n       \n        </Grid>\n    )\n}\n\n\n\nexport default Playlist;\n","/usr/src/app/musico/src/components/playlistSettingForm.js",["72"],"/usr/src/app/musico/src/components/header.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":1,"column":40,"nodeType":"79","messageId":"80","endLine":1,"endColumn":44},{"ruleId":"77","severity":1,"message":"81","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":25},{"ruleId":"77","severity":1,"message":"82","line":4,"column":8,"nodeType":"79","messageId":"80","endLine":4,"endColumn":13},{"ruleId":"77","severity":1,"message":"83","line":4,"column":8,"nodeType":"79","messageId":"80","endLine":4,"endColumn":18},{"ruleId":"77","severity":1,"message":"84","line":9,"column":11,"nodeType":"79","messageId":"80","endLine":9,"endColumn":18},{"ruleId":"77","severity":1,"message":"85","line":40,"column":15,"nodeType":"79","messageId":"80","endLine":40,"endColumn":26},{"ruleId":"77","severity":1,"message":"85","line":70,"column":15,"nodeType":"79","messageId":"80","endLine":70,"endColumn":26},{"ruleId":"77","severity":1,"message":"86","line":4,"column":8,"nodeType":"79","messageId":"80","endLine":4,"endColumn":12},{"ruleId":"77","severity":1,"message":"87","line":25,"column":12,"nodeType":"79","messageId":"80","endLine":25,"endColumn":20},{"ruleId":"77","severity":1,"message":"88","line":25,"column":22,"nodeType":"79","messageId":"80","endLine":25,"endColumn":33},{"ruleId":"77","severity":1,"message":"89","line":27,"column":11,"nodeType":"79","messageId":"80","endLine":27,"endColumn":24},{"ruleId":"77","severity":1,"message":"78","line":4,"column":10,"nodeType":"79","messageId":"80","endLine":4,"endColumn":14},{"ruleId":"90","severity":1,"message":"91","line":30,"column":7,"nodeType":"92","endLine":30,"endColumn":9,"suggestions":"93"},{"ruleId":null,"fatal":true,"severity":2,"message":"94","line":60,"column":77},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'axios' is defined but never used.","'InputLabel' is defined but never used.","'history' is assigned a value but never used.","'customer_id' is assigned a value but never used.","'Grid' is defined but never used.","'playlist' is assigned a value but never used.","'setPlaylist' is assigned a value but never used.","'inputIsPublic' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.","ArrayExpression",["97"],"Parsing error: JSX attributes must only be assigned a non-empty expression\n\n\u001b[0m \u001b[90m 58 | \u001b[39m                        \u001b[33m<\u001b[39m\u001b[33mdiv\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 59 | \u001b[39m                            \u001b[33m<\u001b[39m\u001b[33mlabel\u001b[39m htmlFor\u001b[33m=\u001b[39m\u001b[32m\"name\"\u001b[39m\u001b[33m>\u001b[39m\u001b[33mPlaylist\u001b[39m \u001b[33mName\u001b[39m\u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mlabel\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 60 | \u001b[39m                            \u001b[33m<\u001b[39m\u001b[33minput\u001b[39m type\u001b[33m=\u001b[39m\u001b[32m\"text\"\u001b[39m name\u001b[33m=\u001b[39m\u001b[32m\"name\"\u001b[39m id\u001b[33m=\u001b[39m\u001b[32m\"name\"\u001b[39m  value\u001b[33m=\u001b[39m{}\u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m                                                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 61 | \u001b[39m                        \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mdiv\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 62 | \u001b[39m                        \u001b[33m<\u001b[39m\u001b[33mdiv\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 63 | \u001b[39m                            \u001b[33m<\u001b[39m\u001b[33mlabel\u001b[39m htmlFor\u001b[33m=\u001b[39m\u001b[32m\"isPublic\"\u001b[39m\u001b[33m>\u001b[39mみんなに公開しますか？\u001b[0m","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},"Update the dependencies array to be: [name]",{"range":"100","text":"101"},[1045,1047],"[name]"]